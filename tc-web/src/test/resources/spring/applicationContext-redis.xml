<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <context:annotation-config/>
    
    <bean id="cacheRedisSentinelConfiguration"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster"/>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host1}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port1}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host2}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port2}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host3}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port3}"/>
                </bean>
            </set>
        </property>
    </bean>

    <!--database根据自己的业务线来设定-->
    <bean id="cacheJedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:usePool="true" p:database="${cache.redis.database}">
        <constructor-arg name="sentinelConfig" ref="cacheRedisSentinelConfiguration"/>
    </bean>
    
    <bean id="cacheRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="cacheJedisConnectionFactory">
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>
    
     <!--缓存时长根据自己的业务需求来设定-->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="cacheRedisTemplate"/>
        <property name="defaultExpiration" value="300"/>
        <!--超时配置-->
        <!--property name="expires">
            <map>
                <entry>
                    <key>
                        <value>skeleton_userController</value>
                    </key>
                    <value>3600</value>
                </entry>
            </map>
        </property-->
    </bean>
    
    <bean id="cacheStringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connectionFactory-ref="cacheJedisConnectionFactory">
    </bean>


	<!-- 分布式锁  -->
	<bean id="stringRedisTemplate" class="com.yz.demo.lock.StringRedisTemplateEX">
		<property name="connectionFactory" ref="cacheJedisConnectionFactory" />
	</bean>

	<bean class="com.yz.demo.lock.RedisLockFactory">
		<property name="redisTemplate">
			<bean class="com.yz.demo.lock.StringRedisTemplateEX">
				<property name="connectionFactory" ref="cacheJedisConnectionFactory" />
			</bean>
		</property>
	</bean>
</beans>